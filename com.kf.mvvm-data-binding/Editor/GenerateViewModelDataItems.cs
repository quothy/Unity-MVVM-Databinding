// Editor/GenerateViewModelDataItems.cs
// Place this script in an Editor folder (e.g., Assets/Editor)
using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace MVVMDatabinding.Editor
{
    public static class ViewModelDataItemGenerator
    {
        [MenuItem("Tools/Generate ViewModel DataItems")]
        public static void Generate()
        {
            var assemblies = AppDomain.CurrentDomain.GetAssemblies();
            var viewModelType = typeof(MVVMDatabinding.BaseViewModel);

            foreach (var type in assemblies.SelectMany(a => a.GetTypes())
                .Where(t => t.IsClass && !t.IsAbstract && viewModelType.IsAssignableFrom(t) && t.Namespace == "MVVMDatabinding"))
            {
                var sb = new StringBuilder();
                sb.AppendLine("// <auto-generated />");
                sb.AppendLine("using System;");
                sb.AppendLine("using System.Collections.Generic;");
                sb.AppendLine("namespace MVVMDatabinding");
                sb.AppendLine("{");
                sb.AppendLine($"    public partial class {type.Name}");
                sb.AppendLine("    {");

                // Fields for properties
                foreach (var prop in type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                    .Where(p => p.GetCustomAttribute(typeof(BindableDataAttribute)) != null))
                {
                    sb.AppendLine($"        public DataItem<{prop.PropertyType.Name}> {prop.Name}DataItem;");
                }
                // Fields for methods
                foreach (var method in type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                    .Where(m => m.GetCustomAttribute(typeof(BindableActionAttribute)) != null))
                {
                    sb.AppendLine($"        public DataItem<Action> {method.Name}ActionDataItem;");
                }

                // Method
                sb.AppendLine("        protected override void InitializeGeneratedDataItems()");
                sb.AppendLine("        {");
                sb.AppendLine("            dataItemList = new List<IDataItem>();");

                foreach (var prop in type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                    .Where(p => p.GetCustomAttribute(typeof(BindableDataAttribute)) is BindableDataAttribute))
                {
                    var attr = (BindableDataAttribute)prop.GetCustomAttribute(typeof(BindableDataAttribute));
                    sb.AppendLine($"            {prop.Name}DataItem = new DataItem<{prop.PropertyType.Name}>();");
                    sb.AppendLine($"            {prop.Name}DataItem.Initialize({attr.DataItemId}, nameof({type.Name}.{prop.Name}), \"{attr.Comment}\");");
                    sb.AppendLine($"            dataItemList.Add({prop.Name}DataItem);");
                }
                foreach (var method in type.GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)
                    .Where(m => m.GetCustomAttribute(typeof(BindableActionAttribute)) is BindableActionAttribute))
                {
                    var attr = (BindableActionAttribute)method.GetCustomAttribute(typeof(BindableActionAttribute));
                    sb.AppendLine($"            {method.Name}ActionDataItem = new DataItem<Action>();");
                    sb.AppendLine($"            {method.Name}ActionDataItem.Initialize({attr.DataItemId}, nameof({type.Name}.{method.Name}), \"{attr.Comment}\");");
                    sb.AppendLine($"            dataItemList.Add({method.Name}ActionDataItem);");
                }

                sb.AppendLine("        }");
                sb.AppendLine("    }");
                sb.AppendLine("}");

                // Write to Temp/GeneratedCode
                var dir = Path.Combine("Temp", "GeneratedCode");
                Directory.CreateDirectory(dir);
                var path = Path.Combine(dir, $"{type.Name}.DataItems.g.cs");
                File.WriteAllText(path, sb.ToString());
                Debug.Log($"Generated: {path}");
            }

            AssetDatabase.Refresh();
        }
    }
}
